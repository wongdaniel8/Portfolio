// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.  Do not, however,
// modify the contents of the 'gui' subpackage.

// We have indicated parts of the file that you might especially want to
// fill in with "// FIXME"  or "// REPLACE..." comments.  But again,
// you can change just about anything.

// Comments that start with "//" are intended to be removed from your
// solutions.

package game2048;
import java.util.Random; //
import ucb.util.CommandArgs;

import game2048.gui.Game;
import static game2048.Main.Side.*;

/** The main class for the 2048 game.
 *  @author Daniel Wong 24199291
 */
public class Main {

    /** Size of the board: number of rows and of columns. */
    static final int SIZE = 4;
    /** Number of squares on the board. */
    static final int SQUARES = SIZE * SIZE;

    /** Symbolic names for the four sides of a board. */
    static enum Side { NORTH, EAST, SOUTH, WEST };

    /** The main program.  ARGS may contain the options --seed=NUM,
     *  (random seed); --log (record moves and random tiles
     *  selected.); --testing (take random tiles and moves from
     *  standard input); and --no-display. */
    public static void main(String... args) {
        CommandArgs options =
            new CommandArgs("--seed=(\\d+) --log --testing --no-display",
                            args);
        if (!options.ok()) {
            System.err.println("Usage: java game2048.Main [ --seed=NUM ] "
                               + "[ --log ] [ --testing ] [ --no-display ]");
            System.exit(1);
        }

        Main game = new Main(options);

        while (game.play()) {
            /* No action */
        }
        System.exit(0);
    }

    /** A new Main object using OPTIONS as options (as for main). */
    Main(CommandArgs options) {
        boolean log = options.contains("--log"),
            display = !options.contains("--no-display");
        long seed = !options.contains("--seed") ? 0 : options.getLong("--seed");
        _testing = options.contains("--testing");
        _game = new Game("2048", SIZE, seed, log, display, _testing);
    }

    /** Reset the score for the current game to 0 and clear the board. */
    void clear() {
        _score = 0;
        _count = 0;
        _game.clear();
        _game.setScore(_score, _maxScore);
        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                _board[r][c] = 0;
            }
        }
    }

    /** Play one game of 2048, updating the maximum score. Return true
     *  iff play should continue with another game, or false to exit. */
    boolean play() {
        // FIXME?
        setRandomPiece(); /////
    

        while (true) {
            // FIXME?

            setRandomPiece();

            if (gameOver()) {
                // FIXME?
                _game.endGame();
            }


        GetMove:
            while (true) {

                String key = _game.readKey();
                if (key=="↑") {
                    key="Up"; 
                }
                if (key=="←") {
                    key="Left"; 
                }
                if (key=="→") {
                    key="Right"; 
                }
                if (key=="↓") {
                    key="Down"; 
                }

                switch (key) {
                case "Up": case "Down": case "Left": case "Right":
                    if (!gameOver() && tiltBoard(keyToSide(key))) {
                        break GetMove;
                    }
                    break;
                // FIXME?
                case "Quit":
                    return false;
                default:
                    break;
                }
            }
            // FIXME?
            //return false;
        }
    }

    /** Return true iff the current game is over (no more moves
     *  possible). */
    boolean gameOver() {
        // FIXME?
        /*
        if (tiltBoard(NORTH)==false && tiltBoard(EAST)==false && 
            tiltBoard(SOUTH)==false && tiltBoard(WEST)==false) {
            return true;
        }
        for (int i=0; i<SIZE; i++) {
            for (int j=0; j<SIZE; j++) {
                if (_board[i][j]==2048) {
                    return true;
                }
            }
        }
        */
        return false;
    }

    /** Add a tile to a random, empty position, choosing a value (2 or
     *  4) at random.  Has no effect if the board is currently full. */
    void setRandomPiece() {
        if (_count == SQUARES) {
            return;
        }
        // FIXME?
        int[] specs = _game.getRandomTile();
        while(_board[specs[1]][specs[2]]!=0) {
            specs=_game.getRandomTile();
        }
        _game.addTile(specs[0],specs[1],specs[2]);
        _board[specs[1]][specs[2]]=specs[0];
        System.out.println("location: ("+specs[1]+", "+specs[2]+")");
    }
    
    /** Perform the result of tilting the board toward SIDE.
     *  Returns true iff the tilt changes the board. **/
    boolean tiltBoard(Side side) {
        /* As a suggestion (see the project text), you might try copying
         * the board to a local array, turning it so that edge SIDE faces
         * north.  That way, you can re-use the same logic for all
         * directions.  (As usual, you don't have to). */
        int[][] board = new int[SIZE][SIZE];
        // FIXME?
        Side inverse = NORTH;
        if (side == NORTH) {
            inverse = SOUTH;
        }
        if (side == SOUTH) {
            inverse = NORTH;
        }
        if (side == EAST) {
            inverse = WEST;
        }
        if (side == WEST) {
            inverse = EAST;
        }



        System.out.println("tilt side is "+side);
    
        
        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                board[r][c] =
                    _board[tiltRow(side, r, c)][tiltCol(side, r, c)];
                // FIXME?  
                
                    //update board so that its what it should be after all moves 
                    //change helper functions to intake a board 
                    //treat tiltRow and tiltCol as untilt 
               

            }
        }
        


        // FIXME?

        for (int r = 0; r < SIZE; r += 1) {
            for (int c = 0; c < SIZE; c += 1) {
                _board[tiltRow(side, r, c)][tiltCol(side, r, c)]
                    = board[r][c];
                //my code:
                
                if (r!=0 && _board[r][c]!=0) {
                   
 
                    if (tileInCol(_board,r,c)) {                            
                        if (_board[closestTileRow(_board,r,c)][c] == _board[r][c]) { 
                            System.out.println("merge with tile at row: "+closestTileRow(_board,r,c));
                             _game.mergeTile(_board[r][c],board[r][c]*2,r,c,closestTileRow(_board,r,c),c);
                            _board[closestTileRow(_board,r,c)][c] = _board[r][c]*2; 
                            _board[r][c] = 0;
                            _game.displayMoves();
                        } 


                        
                        else {
                            System.out.println("moveable, the closest tile is in: "+closestTileRow(_board,r,c));
                            _game.moveTile(_board[r][c],r,c,furthestValidRow(_board,r,c),c);
                            _board[furthestValidRow(_board,r,c)][c] = _board[r][c];

                            if (furthestValidRow(_board,r,c) != r) { //check this out 
                            _board[r][c] = 0; 
                            }
                            _game.displayMoves();

                        }
                        
                    }
                    else {

                        System.out.println("moveable: furthest empty valid row is: "+furthestValidRow(_board,r,c));
                        _game.moveTile(_board[r][c],r,c,furthestValidRow(_board,r,c),c);
                        _board[furthestValidRow(_board,r,c)][c] = _board[r][c];
                        _board[r][c] = 0;//FIXME 
                        _game.displayMoves();
                    }
                    
                    /*
                        System.out.println("moveable");
                        System.out.println("row to move to: "+tiltRow(side, furthestValidRow(tiltRow(inverse,r,c),c),   c));
                        System.out.println("col to move to: "+tiltCol(side, furthestValidRow(tiltRow(inverse,r,c),c),   c));                         _game.moveTile(_board[r][c], r, c, 
                                        tiltRow(side, furthestValidRow(tiltRow(inverse,r,c),c),   c), 
                                        tiltCol(side, furthestValidRow(tiltRow(inverse,r,c),c),   c));

                        _board[tiltRow(side, furthestValidRow(tiltRow(inverse,r,c),c),c)]
                              [tiltCol(side, furthestValidRow(tiltRow(inverse,r,c),c),c)] = _board[r][c];
                        _board[r][c] = 0;
                        _game.displayMoves();
                    */

                }
                   
            
            }
        }

        printBoard();
        // FIXME?
        return true;
    }

    void printBoard() {
        String boardString = "";
        for (int r = 0; r < SIZE; r += 1) {
            String row = "";
            for (int c = 0; c < SIZE; c += 1) {
                row += _board[r][c] + ", ";
            }
            row += "\n";
            boardString += row;
        }
        System.out.println(boardString);        
    }

    //my helper method to find the furthest empty row in a continuous stretch of empty rows if it exists
    //FIXME: if tile present, furthest valid square is 1 below, if not present then usual 
    int furthestValidRow(int[][] board, int r, int c) {
        if (r == 0) {
            return 0;
        }
        if (tileInCol(board,r,c)) { 
            if (board[closestTileRow(board,r,c)+1][c] == 0) {
                //System.out.println("furthest empty valid row is: "+closestTileRow(board,r,c)+1);
                return closestTileRow(board,r,c)+1;
            }
            else {
            System.out.println("furthest valid row is same row, staying put");
            return r; //tile can't move so itll stay in same row 
            }

        }
        //no tile in column above curr tile
        int i = r;
        while (i>0) {
            if (board[r-i][c] == 0) {
                //System.out.println("no  tile in col: furtest valid is "+(r-i));
                return r-i;
            }
            else {
                i-=1;
            }
        }
        System.out.println("staying put "+r);
        return r;

    }

    //helper to find row of the above closest tile in the same column, given that it exists
    int closestTileRow(int[][] board, int r, int c) {
        System.out.printf("r is %d and c is %d %n", r, c);
     
        int i = 1;
        while(i<=r) {
             if (board[r-i][c] != 0) {
                System.out.println("closest tile is in row: "+(r-i));
                return r-i;
            }
            else {
                i+=1;
            }
        }
        return r; //shouldnt ever reach this 

    }
    //helper to find if there's a tile in same column above current location
    boolean tileInCol(int[][] board, int r, int c) {
        int i = 1;
        while (i<=r) {
            if (board[r-i][c] != 0) {
                return true;
            }
            else {
                i+=1;
            }
        }
        return false;
    }

    /** Return the row number on a playing board that corresponds to row R
     *  and column C of a board turned so that row 0 is in direction SIDE (as
     *  specified by the definitions of NORTH, EAST, etc.).  So, if SIDE
     *  is NORTH, then tiltRow simply returns R (since in that case, the
     *  board is not turned).  If SIDE is WEST, then column 0 of the tilted
     *  board corresponds to row SIZE - 1 of the untilted board, and
     *  tiltRow returns SIZE - 1 - C. */ 
    int tiltRow(Side side, int r, int c) {
        switch (side) {
        case NORTH:         //tilted to untilted according to Leo 
            return r;
        case EAST:
            return c;
        case SOUTH:
            return SIZE - 1 - r;
        case WEST:
            return SIZE - 1 - c;
        default:
            throw new IllegalArgumentException("Unknown direction");
        }
    }

    /** Return the column number on a playing board that corresponds to row
     *  R and column C of a board turned so that row 0 is in direction SIDE
     *  (as specified by the definitions of NORTH, EAST, etc.). So, if SIDE
     *  is NORTH, then tiltCol simply returns C (since in that case, the
     *  board is not turned).  If SIDE is WEST, then row 0 of the tilted
     *  board corresponds to column 0 of the untilted board, and tiltCol
     *  returns R. */
    int tiltCol(Side side, int r, int c) {
        switch (side) {
        case NORTH:
            return c;
        case EAST:
            return SIZE - 1 - r;
        case SOUTH:
            return SIZE - 1 - c;
        case WEST:
            return r;
        default:
            throw new IllegalArgumentException("Unknown direction");
        }
    }

    /** Return the side indicated by KEY ("Up", "Down", "Left",
     *  or "Right"). */
    Side keyToSide(String key) {
        switch (key) {
        case "Up":
            return NORTH;
        case "Down":
            return SOUTH;
        case "Left":
            return WEST;
        case "Right":
            return EAST;
        default:
            throw new IllegalArgumentException("unknown key designation");
        }
    }

    /** Represents the board: _board[r][c] is the tile value at row R,
     *  column C, or 0 if there is no tile there. */
    private final int[][] _board = new int[SIZE][SIZE];

    /** True iff --testing option selected. */
    private boolean _testing;
    /** THe current input source and output sink. */
    private Game _game;
    /** The score of the current game, and the maximum final score
     *  over all games in this session. */
    private int _score, _maxScore;
    /** Number of tiles on the board. */
    private int _count;
}

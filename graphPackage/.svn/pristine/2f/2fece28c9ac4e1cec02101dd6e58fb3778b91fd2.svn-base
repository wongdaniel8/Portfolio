package graph;

import org.junit.Test;
import static org.junit.Assert.*;

/** Unit tests for the Graph class.
 *  @author Daniel Wong
 */
public class GraphTesting {

    // Add tests.  Here's a sample.

    @Test
    public void emptyGraph() {
        UndirectedGraph g = new UndirectedGraph();
        assertEquals("Initial graph has vertices", 0, g.vertexSize());
        assertEquals("Initial graph has edges", 0, g.edgeSize());
    }

    @Test
    public void vertexBasics() {
    	DirectedGraph g = new DirectedGraph();
    	assertEquals(g.maxVertex(), 0, .01);
    	int first = g.add();
    	assertEquals(g.vertexSize(), 1, .01);
    	assertEquals(first, 1, .01);
    	int second = g.add();
    	assertEquals(second, 2, .01);
    	assertEquals(g.maxVertex(), 2, .01);
    	assertEquals(g.edgeSize(), 0, .01);
    	g.remove(1);
    	assertEquals(g.contains(1), false);
    	assertEquals(g.contains(2), true);
    	assertEquals(g.contains(3), false);
    }


    @Test
    public void edgesUndirected() {
    	UndirectedGraph g = new UndirectedGraph();
    	int first = g.add(); int second = g.add();
		int third = g.add(); int fourth = g.add();
    	int fifth = g.add();
    	g.add(1, 3);
    	assertEquals(g.edgeSize(), 1, .01);
    	assertEquals(g.contains(1,3), true);
    	assertEquals(g.contains(3,1), true);
    	assertEquals(g.contains(1,2), false);
    	assertEquals(g.contains(3,4), false);
    	g.remove(1,3);
    	assertEquals(g.contains(1,3), false);
    	assertEquals(g.contains(3,1), false);
    	assertEquals(g.contains(1, 9), false);
    	g.add(1, 3);
    	g.add(1, 5);
    	assertEquals(g.outDegree(1), 2, .01);
    	assertEquals(g.outDegree(5), 1, .01);
    	g.add(2, 5);
    	g.add(2, 5); g.add(1,3);
    	assertEquals(g.edgeSize(), 3, .01);
    	g.add(3,5);
    	assertEquals(g.edgeId(3,5), 35, .01);
    	assertEquals(g.edgeId(3,9), 0, .01);
    	assertEquals(g.inDegree(5), 3, .01);
    	assertEquals(g.inDegree(2), 1, .01);
    	assertEquals(g.inDegree(3), 2, .01);

    }

    
    @Test
    public void edgesDirected() {
    	DirectedGraph g = new DirectedGraph();
    	int first = g.add(); int second = g.add();
    	int third = g.add(); int fourth = g.add();
    	int fifth = g.add();
    	g.add(1, 3);
    	assertEquals(g.contains(1, 3), true);
    	assertEquals(g.contains(3, 1), false);
    	assertEquals(g.edgeSize(), 1, .01);
    	g.remove(1,3);
    	g.add(2, 3); g.add(1, 5); g.add(3, 3);
    	assertEquals(g.inDegree(3), 2, .01); //
    	assertEquals(g.edgeSize(), 3, .01);
    	assertEquals(g.contains(3, 3), true);
    	g.remove(3);
    	assertEquals(g.edgeSize(), 1, .01);
    	int num = g.add();
    	assertEquals(num, 3, .01);
    	g.add(3, 3);
    	assertEquals(g.edgeSize(), 2, .01);
    	g.remove(3, 3);
    	assertEquals(g.edgeSize(), 1, .01);
    	g.add(5, 1);
    	assertEquals(g.edgeSize(), 2, .01);
    }

    @Test
    public void testVerticesIteration() {
    	UndirectedGraph g = new UndirectedGraph();
    	int first = g.add();
    	int second = g.add();
    	int third = g.add();
    	int fourth = g.add();
    	int fifth = g.add();
    	g.remove(2);
    	Iteration<Integer> iteration = g.vertices();
    	assertEquals(iteration.next(), 1, .01);
    	assertEquals(iteration.next(), 3, .01);
    	assertEquals(iteration.next(), 4, .01);
    	assertEquals(iteration.next(), 5, .01);
    	assertEquals(iteration.hasNext(), false);

    }

    @Test
    public void testEdgeIteration() {
    	DirectedGraph g = new DirectedGraph();
    	//UndirectedGraph g = new UndirectedGraph();
    	int first = g.add(); int second = g.add();
    	int third = g.add(); int fourth = g.add();
    	int fifth = g.add();
    	g.add(1,3); g.add(4,5); g.add(3,1);
    	g.add(2,1); g.add(2,4); g.add(3,3); g.add(3, 3); //g.add(9, 10);
   		
    	Iteration<int[]> iteration = g.edges();
    	System.out.println("edges: ");
    	while (iteration.hasNext()) {
	    	int[] arr = iteration.next();
	    	System.out.println(arr[0]+" "+arr[1]);
    	}
    	
    }


    @Test
    public void testSuccessor() {
    	UndirectedGraph g = new UndirectedGraph();
    	//DirectedGraph g = new DirectedGraph();
    	g.add(); g.add(); g.add(); g.add(); g.add();
    	g.add(1,2); g.add(1,3); g.add(1,4); g.add(1,5);
    	assertEquals(g.successor(1, 3), 5, .01);
    	assertEquals(g.successor(1, 0), 2, .01);
    	assertEquals(g.successor(1, 4), 0, .01);
    	g.remove(5); g.remove(4);
    	assertEquals(g.successor(1, 1), 3, .01);
    	g.add(); g.add(1,4);
    	assertEquals(g.successor(1, 2), 4, .01);
  		g.remove(2);
  		g.add(); g.add(1,2);
  		assertEquals(g.successor(1, 2), 2);
  		g.add(1, 1); //FIXME REPEATED SUCCESSOR FOR UNDIRECTED GRAPHS!!!
    	Iteration<Integer> iteration = g.successors(1);
    	System.out.println("successors: ");
    	while (iteration.hasNext()) {
	    	int s = iteration.next();
	    	System.out.println(s);
    	}
    }

    @Test
    public void testPredecessorUndirected() {
    	//DirectedGraph g = new DirectedGraph();
    	UndirectedGraph g = new UndirectedGraph();
    	g.add(); g.add(); g.add(); g.add(); g.add();
    	g.add(2,1); g.add(5,1); g.add(3,1);
    	assertEquals(g.predecessor(1, 2), 3, .01);
    	assertEquals(g.predecessor(1, 1), 5, .01);
    	assertEquals(g.predecessor(1, 10), 0, .01);
    	g.remove(2);
    	assertEquals(g.predecessor(1, 0), 5, .01);
		g.add(); g.add(2,1);
		assertEquals(g.predecessor(1, 2), 2, .01);
		g.add(1, 1);
		System.out.println("predecessors undirected test: ");
   		for (int j : g.predecessors(1)) {
   			System.out.println(j);
   		}
    }

    @Test
    public void testPredecessorDirected() {
    	DirectedGraph g = new DirectedGraph();
    	g.add(); g.add(); g.add(); g.add(); g.add();
   		g.add(1, 2); g.add(3, 2); g.add(5, 2);
   		assertEquals(g.predecessor(2, 1), 3, .01);
   		assertEquals(g.predecessor(2, 3), 0, .01);
   		g.remove(3);
   		assertEquals(g.predecessor(2, 1), 5, .01);
   		g.add(); g.add(3, 2);
   		assertEquals(g.predecessor(2, 1), 5, .01);
   		assertEquals(g.predecessor(2, 2), 3, .01);
   		g.add(2, 2);
   		System.out.println("predecessors directed test: ");
   		for (int j : g.predecessors(2)) {
   			System.out.println(j);
   		}
    }

    @Test public void end() {
    	assertEquals(true, false);
    }

   


}

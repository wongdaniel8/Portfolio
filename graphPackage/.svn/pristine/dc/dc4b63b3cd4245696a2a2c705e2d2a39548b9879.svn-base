package graph;

import java.util.HashSet; 
import java.util.HashMap;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Iterator; ////

/* See restrictions in Graph.java. */

/** A partial implementation of Graph containing elements common to
 *  directed and undirected graphs.
 *
 *  @author Daniel Wong
 */
abstract class GraphObj extends Graph {

    /** A new, empty Graph. */
    GraphObj() {
        // FIXME
        _vertices = new HashMap<Integer, LinkedList<Integer>>();
    }

    @Override
    public int vertexSize() {
        return _vertices.size();
    }

    @Override
    public int maxVertex() {
        int max = 0;
        for (Integer i : _vertices.keySet()) { 
            if (i > max) {
                max = i;
            }
        }
        return max;
    }

    @Override
    public int edgeSize() {
        int count = 0;
        for (Integer i :_vertices.keySet()) {
            count += _vertices.get(i).size();
        }
        if (!isDirected()) {
            return count / 2;
        } else {
            return count;
        }
    }

    @Override
    public abstract boolean isDirected();

    @Override
    public int outDegree(int v) {
        //FIXME
        return _vertices.get(v).size();
    }

    @Override
    public abstract int inDegree(int v);

    @Override
    public boolean contains(int u) {
        return _vertices.containsKey(u);
    }

    @Override
    public boolean contains(int u, int v) {
        // FIXME
        // spec doesn't say if for instance 
        // u directs to v, then is contains(v,u) false, or true?
        if (!contains(u) || !contains(v)) {
            return false;
        }
        for (Integer i : _vertices.get(u)) {
            if (v == i) {
                return true;
            } 
        }
        if (!isDirected()) {
            for (Integer i : _vertices.get(v)) {
                if (u == i) {
                    return true;
                } 
            }
        }
        return false;
    }

    @Override
    public int add() {
        // FIXME
        int i = 1;
        while (true) {
            if (!contains(i)) {
                LinkedList<Integer> myList = new LinkedList<Integer>();
                _vertices.put(i, myList);
                break;
            } else {
                i++;
            }
        }
        return i;
    }

    @Override
    public int add(int u, int v) {
        // FIXME
        // in this implementation:
        // normal adjacenecy list for directed case; in undirected case, 
        // adjacenecy list is treated as edge pointing in both directions
        if (contains(u, v)) {
            return u;
        } else {
            _vertices.get(u).add(v);
            if (!isDirected()) {
                _vertices.get(v).add(u);
            }
        }
        return u;
    }

    @Override
    public void remove(int v) {
         if (contains(v)) {
            for (Integer i : _vertices.keySet()) {
                if (_vertices.get(i).contains(v)) {
                        _vertices.get(i).remove((Integer) v);
                }
            }
            _vertices.remove(v);
        }
    }

    @Override
    public void remove(int u, int v) {
        //FIXME
        if (contains(u, v)) {
            _vertices.get(u).remove((Integer) v);
            if (!isDirected()) {
                _vertices.get(v).remove((Integer) u);
            }
        }
    }

    @Override
    public Iteration<Integer> vertices() {
        // FIXME 
        //is this ok to do? 
        ArrayList<Integer> array = new ArrayList<Integer>();
        for (Integer i : _vertices.keySet()) {
            array.add(i);
        }
        SimpleIteration<Integer> answer = new SimpleIteration<Integer>(array.iterator());
        //SimpleIteration<Integer> answer = Iteration.iteration((Iterator<Integer>) array.iterator());
        return answer;
    }

    @Override
    public int successor(int v, int k) {
        // FIXME
        //successors are children, ordered by order that child was added to v

        if (k > _vertices.get(v).size() - 1) {
            return 0;
        } else {
            return _vertices.get(v).get(k);
        }

        /* //code for following paths 
        if (k <= _vertices.get(v).size()) {
            return _vertices.get(v).get(k);
        }
        if (_vertices.get(v).size() == 0) {
            return 0;
        }
        if (k > _vertices.get(v).size()) {
            return successor(_vertices.get(v).getLast(), k - _vertices.get(v).size());
        }
        */
    }

    @Override
    public abstract int predecessor(int v, int k);

    @Override
    public Iteration<Integer> successors(int v) {
        // FIXME
        ArrayList<Integer> array = new ArrayList<Integer>();
        int k = _vertices.get(v).size() - 1;
        while (k >= 0) {
            array.add(successor(v, k));
            k --;
        }
        SimpleIteration<Integer> answer = new SimpleIteration<Integer>(array.iterator());
        return answer;
    }

    @Override
    public abstract Iteration<Integer> predecessors(int v);

    @Override
    public Iteration<int[]> edges() {
        // FIXME
        ArrayList<int[]> array = new ArrayList<int[]>();
        for (Integer i : _vertices.keySet()) {
            for (int j = 0; j < _vertices.get(i).size(); j++) {
                int[] element = new int[2];
                element[0] = i;
                element[1] = _vertices.get(i).get(j);
                int[] reverse = new int[2];
                reverse[0] = element[1];
                reverse[1] = element[0];
                if (!specialContains(element, array)
                    && !specialContains(reverse, array)) {
                    array.add(element);
                }
            }
        }
        SimpleIteration<int[]> answer = new SimpleIteration<int[]>(array.iterator());
        return answer;
    }

    private boolean specialContains(int[] a, ArrayList<int[]> array) { //ok to add my own private method?
        for (int[] element : array) {
            if ((a[0] == element[0]) && (a[1] == element[1])) {
                return true;
            }
        }
        return false;
    }

    @Override
    protected boolean mine(int v) {
        // FIXME
        return contains(v);
    }

    @Override
    protected void checkMyVertex(int v) {
        // FIXME
        if(!contains(v)) {
            throw new IllegalArgumentException();
        }
    }

    @Override
    protected int edgeId(int u, int v) {
        // FIXME
        if (!contains(u, v)) {
            return 0;
        } else {
            String uprime = Integer.toString(u);
            String vprime = Integer.toString(v);
            String concat = uprime + vprime;
            int id = Integer.parseInt(concat);
            return id;
        }
    }

    // FIXME ======================================================================
    private HashMap<Integer, LinkedList<Integer>> _vertices;


    //is this ok to just copy the SimpleIteration class over and put it here?

    /** A wrapper class that turns an Iterator<TYPE> into an Iteration<TYPE>. */
    private static class SimpleIteration<Type> extends Iteration<Type> {
        /** ITER as an iteration. */
        SimpleIteration(Iterator<Type> iter) {
            _iter = iter;
        }

        @Override
        public boolean hasNext() {
            return _iter.hasNext();
        }

        @Override
        public Type next() {
            return _iter.next();
        }

        /** The iterator with which I was constructed. */
        private Iterator<Type> _iter;
    }

    /** Returns an Iteration<TYPE> that delegates to IT. */
    static <Type> Iteration<Type> iteration(Iterator<Type> it) {
        return new SimpleIteration<>(it);
    }

    /** Returns an Iteration<TYPE> that delegates to ITERABLE. */
    static <Type> Iteration<Type> iteration(Iterable<Type> iterable) {
        return new SimpleIteration<>(iterable.iterator());
    }
}

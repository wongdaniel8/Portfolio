package graph;

/* See restrictions in Graph.java. */

import java.util.List;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.util.HashMap;

/** The shortest paths through an edge-weighted labeled graph of type GRAPHTYPE.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to get parameters of the
 *  search and to return results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author Daniel Wong
 */
public abstract class ShortestPaths {

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        // FIXME
        // DO WE ASSUME G IS OF TYPE LABELEDGRAPH? CURRENT IMPLEMENTATION IS
        // UNDER THE ASSUMPTION THAT G IS NOT A LABLELEDGRAPH, SO I MAKE MY OWN
        // IN CONSTRUCTOR
        _marked = new ArrayList<Integer>();
        _fringe = new ArrayDeque<Integer>();
        _map = new HashMap<Integer, Integer>();
        _LG = new LabeledGraph<Integer, Integer>(_G);
        _LG.setLabel(_source, 0);
        for (int v : _G.vertices()) {
            if (v != _source) {
                _LG.setLabel(v, Integer.MAX_VALUE);
            }
        }
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        // FIXME
        //breadthfirst is best i think
        //alg: get vertex, map vertex to the right predecesor that will lead it
        // to source in shortest distance, repeat for successors
        _fringe.add(_source);
        while (!_fringe.isEmpty()) {           
            int i = _fringe.removeFirst();
            if (!_marked.contains(i)) {
                _marked.add(i);
                int label = calculateSmallestLabel(i, 0);
                _LG.setLabel(i, label);
                if (_G.outDegree(i) == 0) {
                    _fringe.remove(i);
                }
                for (Integer k : _G.successors(i)) {
                    if (!_marked.contains(k)) {
                        _fringe.add(k);
                        int minPred = findSmallestPredecessor(k);
                        _map.put(k, minPred);
                    }
                }
            }
        }

    }
    /** Returns the smallest label, represented as COUNT, of VERTEX following
     * the shortes path towards the source vertex. Recursively computes count. */
    private int calculateSmallestLabel(int vertex, int count) {
        if (vertex == _source) {
            return count;
        } else {
            return calculateSmallestLabel(_map.get(vertex),
                _map.get(vertex) + count);   
        }
    }
    /** Given a vertex VERTEX that has predecessors, returns the predecesor that will
     * lead VERTEX to the source in the shortest path. */ 
    private int findSmallestPredecessor (int vertex) {
        HashMap<Integer, Integer> miniMap = new HashMap<Integer, Integer>();
        for (int pred : _LG.predecessors(vertex)) {
            int value = _LG.getLabel(pred, vertex) + _LG.getLabel(pred);
            miniMap.put(pred, value);
        }
        int min = Integer.MAX_VALUE;
        int returnVal = -1;
        for (Integer k : miniMap.keySet()) {
            if (miniMap.get(k) < min) {
                min = miniMap.get(k);
                returnVal = k;
            }
        }
        return returnVal; 
    }

    /** Returns the starting vertex. */
    public int getSource() {
        // FIXME
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        // FIXME
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME
        ArrayList<Integer> returnVal = new ArrayList<Integer>();
        ArrayList<Integer> arr = new ArrayList<Integer>();
        int pred = _map.get(v);
        while (pred != _source) {
            arr.add(pred);
            pred = _map.get(pred);
        }
        //reverse list and then return
        for (int i = arr.size() - 1; i >= 0; i --) {
            returnVal.add(arr.get(i));
        }
        return returnVal;

    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    // FIXME

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;


    // FIXME
    /** LabeledGraph representation of _G. */
    private LabeledGraph<Integer, Integer> _LG;
    /** ArrayList to keep track of marked vertices. */
    private ArrayList<Integer> _marked;
    /** the fringe of vertices that need to be processed. */
    private ArrayDeque<Integer> _fringe;
    /** Maps a vertex to another vertex along the 
     * shortest path route to the source. */
    private HashMap<Integer, Integer> _map;

}

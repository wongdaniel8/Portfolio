package graph;

import org.junit.Test;
import static org.junit.Assert.*;

/** Unit tests for the Graph class.
 *  @author
 */
public class GraphTesting {

    // Add tests.  Here's a sample.

    @Test
    public void emptyGraph() {
        DirectedGraph g = new DirectedGraph();
        assertEquals("Initial graph has vertices", 0, g.vertexSize());
        assertEquals("Initial graph has edges", 0, g.edgeSize());
    }

    @Test
    public void vertexBasics() {
    	DirectedGraph g = new DirectedGraph();
    	assertEquals(g.maxVertex(), 0, .01);
    	int first = g.add();
    	assertEquals(g.vertexSize(), 1, .01);
    	assertEquals(first, 1, .01);
    	int second = g.add();
    	assertEquals(second, 2, .01);
    	assertEquals(g.maxVertex(), 2, .01);
    	assertEquals(g.edgeSize(), 0, .01);
    	g.remove(1);
    	assertEquals(g.contains(1), false);
    	assertEquals(g.contains(2), true);
    	assertEquals(g.contains(3), false);

    }

    @Test
    public void edges() {
    	DirectedGraph g = new DirectedGraph();
    	int first = g.add();
    	int second = g.add();
    	int third = g.add();
    	int fourth = g.add();
    	int fifth = g.add();
    	g.add(1, 3);
    	assertEquals(g.edgeSize(), 1, .01);
    	assertEquals(g.contains(1,3), true);
    	assertEquals(g.contains(1,2), false);
    	assertEquals(g.contains(3,4), false);
    	g.remove(1,3);
    	assertEquals(g.contains(1,3), false);
    	assertEquals(g.contains(3,1), false);
    	assertEquals(g.contains(1, 9), false);
    	g.add(1, 3);
    	g.add(1, 5);
    	assertEquals(g.outDegree(1), 2, .01);
    	assertEquals(g.outDegree(5), 1, .01);
    	g.add(2, 5);
    	g.add(2, 5); g.add(1,3);
    	assertEquals(g.edgeSize(), 3, .01);
    }

    @Test
    public void testVerticesIteration() {
    	DirectedGraph g = new DirectedGraph();
    	int first = g.add();
    	int second = g.add();
    	int third = g.add();
    	int fourth = g.add();
    	int fifth = g.add();
    	g.remove(2);
    	Iteration<Integer> iteration = g.vertices();
    	assertEquals(iteration.next(), 1, .01);
    	assertEquals(iteration.next(), 3, .01);
    	assertEquals(iteration.next(), 4, .01);
    	assertEquals(iteration.next(), 5, .01);
    	assertEquals(iteration.hasNext(), false);
    }

    @Test
    public void testEdgeIteration() {
    	DirectedGraph g = new DirectedGraph();
    	int first = g.add(); int second = g.add();
    	int third = g.add(); int fourth = g.add();
    	int fifth = g.add();
    	g.add(1,3); g.add(4,5);
    	g.add(2,1); g.add(2,4);
   
    	Iteration<int[]> iteration = g.edges();
    	
    	while (iteration.hasNext()) {
	    	int[] arr = iteration.next();
	    	System.out.println(arr[0]+" "+arr[1]);
    	}
    	
    }


    @Test
    public void successor() {
    	DirectedGraph g = new DirectedGraph();
    	g.add(); g.add(); g.add();
    	g.add(1,2); g.add(2,1); g.add(2,3);
    	assertEquals(g.successor(1, 2), 3, .01);
    	//WHAT IS THE DEFINITION OF A SUCCESSOR?
    }

}

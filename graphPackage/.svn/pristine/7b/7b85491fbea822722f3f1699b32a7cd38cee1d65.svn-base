package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.ArrayList;


/** Unit tests for the Traversal class.
 *  @author Daniel Wong
 */
public class TraversalTest {

    @Test
    public void testBreadthAndDepthTraversals1() {
        DirectedGraph g = new DirectedGraph();
        g.add(); g.add(); g.add(); g.add(); g.add();
        g.add(5, 4); g.add(5, 3); g.add(4, 1); g.add(3, 2);
        g.add(1, 5);
        DFSCollector dfs = new DFSCollector(g);
        ArrayList<Integer> a0 = new ArrayList<Integer>();
        a0.add(5);
        System.out.println();
        System.out.println("Depth first traversal: ");
        dfs.traverse(a0);
        ArrayList<Integer> collected = dfs.getCollected();
        for (Integer j : collected) {
            System.out.print(j + ", ");
        }
        assertEquals(collected.get(0), 5, .01);
        assertEquals(collected.get(1), 3, .01);
        assertEquals(collected.get(2), 2, .01);
        assertEquals(collected.get(3), 4, .01);
        assertEquals(collected.get(4), 1, .01);
        BFSCollector bfs = new BFSCollector(g);
        ArrayList<Integer> a1 = new ArrayList<Integer>();
        a1.add(5);
        System.out.println();
        System.out.println("Breadth first traversal: ");
        bfs.traverse(a1);
        collected = bfs.getCollected();
        for (Integer j : collected) {
            System.out.print(j + ", ");
        }
    }

    @Test
    public void testDepthAndBreadthTraversals2() {
        UndirectedGraph g = new UndirectedGraph();
        g.add(); g.add(); g.add(); g.add(); g.add();
        g.add(); g.add(); g.add(); g.add(); g.add();
        g.add(1, 2); g.add(2, 5); g.add(2, 4); g.add(4, 5);
        g.add(6, 7); g.add(1, 3); g.add(3, 6); g.add(4, 8);
        g.add(8, 9); g.add(8, 10);
        DFSCollector dfs = new DFSCollector(g);
        ArrayList<Integer> a0 = new ArrayList<Integer>();
        a0.add(1);
        System.out.println();
        System.out.println("Depth first traversal: ");
        dfs.traverse(a0);
        ArrayList<Integer> collected = dfs.getCollected();
        for (Integer j : collected) {
            System.out.print(j + ", ");
        }
        BFSCollector bfs = new BFSCollector(g);
        ArrayList<Integer> a1 = new ArrayList<Integer>();
        a1.add(1);
        System.out.println();
        System.out.println("Breadth first traversal: ");
        bfs.traverse(a1);
        collected = bfs.getCollected();
        for (Integer j : collected) {
            System.out.print(j + ", ");
        }
        System.out.println();
    }

    @Test
    public void testPostVisit() {
        DirectedGraph g = new DirectedGraph();
        g.add(); g.add(); g.add(); g.add(); g.add();
        g.add(5, 4); g.add(5, 3); g.add(4, 1); g.add(3, 2);
        g.add(1, 5);
        PostDFSCollector post = new PostDFSCollector(g);
        ArrayList<Integer> a0 = new ArrayList<Integer>();
        a0.add(5);
        System.out.println();
        System.out.println("PostOrder traversal: ");
        post.traverse(a0);
        for (Integer j : post.getCollected()) {
            System.out.print(j + ", ");
        }
    }

    /** Class to represent a depth first search. */
    private class DFSCollector extends DepthFirstTraversal {
        DFSCollector(Graph G) {
            super(G);
        }
        @Override
        public boolean visit(int v) {
            _collected.add(v);
            return true;
        }
        /**Returns an arraylist tht represents visited vertices. */
        private ArrayList<Integer> getCollected() {
            return _collected;
        }
        /** Represents visited vertices. */
        private ArrayList<Integer> _collected = new ArrayList<Integer>();
    }

    /** Class to represent a breadth first search. */
    private class BFSCollector extends BreadthFirstTraversal {
        BFSCollector(Graph G) {
            super(G);
        }
        @Override
        public boolean visit(int v) {
            _collected.add(v);
            return true;
        }
        /**Returns an arraylist tht represents visited vertices. */
        private ArrayList<Integer> getCollected() {
            return _collected;
        }
        /** Represents visited vertices. */
        private ArrayList<Integer> _collected = new ArrayList<Integer>();
    }

    /** Class to represent a post order  depth first search. */
    private class PostDFSCollector extends DepthFirstTraversal {
        protected PostDFSCollector(Graph G) {
            super(G);
            _collected = new ArrayList<Integer>();
        }

        @Override
        public boolean visit(int v) {
            _collected.add(v);
            return true;
        }

        @Override
        protected boolean shouldPostVisit(int v) {
            return true;
        }

        @Override
        protected boolean reverseSuccessors(int v) {
            return true;
        }

        @Override
        protected boolean postVisit(int v) {
            visit(v);
            return true;
        }
        /**Returns an arraylist tht represents visited vertices. */
        private ArrayList<Integer> getCollected() {
            return _collected;
        }
        /** Represents visited vertices. */
        private ArrayList<Integer> _collected;
    }
}

package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Queue;
import java.util.ArrayList;
import java.util.ArrayDeque;


/** Unit tests for the ShortestPaths class.
 *  @author Daniel Wong
 */
//ShortestPathsTest
public class PathsTesting {
    /*
    @Test
    public void testSetUpFromTextBook() {
    	UndirectedGraph g = new UndirectedGraph();
    	LabeledGraph<Integer, Double> _LG = 
		new LabeledGraph<Integer, Double>(g);
		_LG.add(0); _LG.add(Integer.MAX_VALUE); 
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);
		
		_LG.add(1, 3, new Double (5)); _LG.add(1, 7, new Double (7)); _LG.add(1, 2, new Double (2));
		_LG.add(1, 4, new Double (3)); _LG.add(7, 4, new Double (3)); _LG.add(7, 8, new Double (1));
		_LG.add(4, 2, new Double (5)); _LG.add(4, 8, new Double (6)); _LG.add(4, 5, new Double (4));
		_LG.add(2, 3, new Double (4)); _LG.add(2, 5, new Double (3)); _LG.add(1, 3, new Double (5));
		_LG.add(3, 6, new Double (2)); _LG.add(5, 6, new Double (1)); _LG.add(5, 8, new Double (2));
		myPath p = new myPath(_LG, 1, 6);
		p.setPaths();
		assertEquals(p.getWeight(1, 7), 7, .01);
		assertEquals(p.getWeight(1), 0, .01);
		ArrayList<Integer> pathToSix = (ArrayList<Integer>) p.pathTo(6);
		System.out.println("path to six: ");
		for (Integer i : pathToSix) {
			System.out.print(i);
		}
    } 
    */
    ///*
    @Test
    public void testSetUpFromProjSlides() {
    	DirectedGraph g = new DirectedGraph();
    	//UndirectedGraph g = new UndirectedGraph();
    	LabeledGraph<Integer, Double> _LG = 
		new LabeledGraph<Integer, Double>(g);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE); 
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);
		_LG.remove(1);
		_LG.add(4, 5, new Double (11.2)); _LG.add(4, 2, new Double (12.2));
		_LG.add(5, 6, new Double (30)); _LG.add(5, 3, new Double (9.1));
		_LG.add(4, 3, new Double (102.0)); _LG.add(2, 3, new Double (6.5));
		myPath p = new myPath(_LG, 4, 3);
		p.setPaths();
		ArrayList<Integer> pathToThree = (ArrayList<Integer>) p.pathTo(3);
		assertEquals(pathToThree.size(), 3, .01);
		System.out.println("path to three: ");
		for (Integer i : pathToThree) {
			System.out.print(i + ", ");
		}
		System.out.println();
		assertEquals(pathToThree.get(0), 4, .01);
		assertEquals(pathToThree.get(1), 2, .01);
		assertEquals(pathToThree.get(2), 3, .01);

		//assertEquals(p.getWeight(2), 6.5, .01);
		assertEquals(p.getWeight(2), 12.2, .01); //remove this line later
		assertEquals(p.getWeight(3), 0, .01);
		assertEquals(p.getWeight(4), 18.7, .01);
		assertEquals(p.getWeight(5), 9.1, .01);
		//assertEquals(p.getWeight(6), 0, .01);
		assertEquals(p.getPredecessor(6), 5, .01);
		//assertEquals(p.getPredecessor(4), 0, .01);
		assertEquals(p.getPredecessor(5), 4, .01);
		assertEquals(p.getPredecessor(2), 4, .01);
		assertEquals(p.getPredecessor(3), 2, .01);
    }
   //*/
	/*
    @Test
    public void testMySetUp() {
    	DirectedGraph g = new DirectedGraph();
    	//UndirectedGraph g = new UndirectedGraph();
    	LabeledGraph<Integer, Double> _LG = 
		new LabeledGraph<Integer, Double>(g);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE); 
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);

		_LG.add(1, 2, new Double (1)); _LG.add(1, 4, new Double (10));
		_LG.add(2, 5, new Double (2)); _LG.add(2, 3, new Double (5));
		_LG.add(1, 3, new Double (3)); _LG.add(3, 5, new Double (2));
		_LG.add(5, 6, new Double (3));
		myPath p = new myPath(_LG, 1, 6);
		p.setPaths();
		ArrayList<Integer> pathToSix = (ArrayList<Integer>) p.pathTo(6);
		assertEquals(pathToSix.size(), 4, .01);
		System.out.println("path to six: ");
		for (Integer i : pathToSix) {
			System.out.print(i + ", ");
		}
		assertEquals(p.getWeight(6), 0, .01);
		assertEquals(p.getWeight(5), 3, .01);
		assertEquals(p.getWeight(3), 5, .01);
		assertEquals(p.getWeight(2), 5, .01);
		assertEquals(p.getWeight(1), 6, .01);
		assertEquals(p.getWeight(4), 0, .01);
		assertEquals(p.getPredecessor(6), 5, .01);
		assertEquals(p.getPredecessor(5), 2, .01);
		assertEquals(p.getPredecessor(3), 1, .01);
		assertEquals(p.getPredecessor(2), 1, .01);
		assertEquals(p.getPredecessor(4), 1, .01); //eeeh sketchy four isnt part of the path, should be 0...



    }
    */

    /*
    @Test
    public void basicUndirected() {
    	UndirectedGraph g = new UndirectedGraph();
    	LabeledGraph<Integer, Double> _LG = 
		new LabeledGraph<Integer, Double>(g);
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE); 
		_LG.add(Integer.MAX_VALUE); _LG.add(Integer.MAX_VALUE);

		_LG.add(1, 2, new Double (100)); _LG.add(1, 3, new Double (1));
		_LG.add(4, 2, new Double (3)); _LG.add(4, 3, new Double (2));
		myPath p = new myPath(_LG, 1, 4);
		p.setPaths();
		ArrayList<Integer> pathToFour = (ArrayList<Integer>) p.pathTo(4);
		assertEquals(pathToFour.size(), 4, .01);
		System.out.println("path to four: ");
		for (Integer i : pathToFour) {
			System.out.print(i + ", ");
		}
    }
    */

   
	private class myPath extends SimpleShortestPaths {
		myPath(Graph G, int source, int destination) {
			super(G, source, destination);
			//_LG = (LabeledGraph<Integer, Double>) G;
		}

		@Override
		protected double getWeight(int u, int v) {
			return ((LabeledGraph<Integer, Double>) _G).getLabel(u, v);
			//return 0;
		}
		//private LabeledGraph<Integer, Double> _LG;
	}

}
package graph;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Queue;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.util.Collections;


//import java.util.Arrays.asList;

/** Unit tests for the Traversal class.
 *  @author Daniel Wong
 */

public class TraversalTest {
	/*
	@Test
	public void test1() {
		DirectedGraph g = new DirectedGraph();
		g.add(); g.add(); g.add(); g.add(); g.add();
		g.add(5,4); g.add(5, 3); g.add(4, 1); g.add(3, 2);
		g.add(1, 5);
		BFSCollector col = new BFSCollector(g);
	    ArrayList<Integer> a0 = new ArrayList<Integer>();
	    a0.add(5);
	    System.out.println("BFSCollector traversal: ");
	    col.traverse(a0);
	    ArrayList<Integer> collected = col.getCollected();
	    //System.out.println(collected.size());
	    for (int i = 0; i < collected.size(); i++) {
	    	System.out.print(collected.get(i) + ", ");
	    }
	    assertEquals(collected.get(0), 5, .01);
	    assertEquals(collected.get(1), 4, .01);
	    assertEquals(collected.get(2), 1, .01);
	    assertEquals(collected.get(3), 3, .01);
	    assertEquals(collected.get(4), 2, .01);
	}
	*/
	
	@Test
	public void testBreadthAndDepthTraversals1() {
		DirectedGraph g = new DirectedGraph();
		g.add(); g.add(); g.add(); g.add(); g.add();
		g.add(5,4); g.add(5, 3); g.add(4, 1); g.add(3, 2);
		g.add(1, 5);
		DepthFirstTraversal dft = new DepthFirstTraversal(g);
	    ArrayList<Integer> a0 = new ArrayList<Integer>();
	    a0.add(5);
	    System.out.println();
	    System.out.println("Depth first traversal: ");
	    dft.traverse(a0);

	    BreadthFirstTraversal bft = new BreadthFirstTraversal(g);
	    ArrayList<Integer> a1 = new ArrayList<Integer>();
	    a1.add(5);
	    System.out.println();
	    System.out.println("Breadth first traversal: ");
	    bft.traverse(a1);
	    System.out.println();
	}
	
	/*
	@Test
	public void testPostOrderTraversal() {
		DirectedGraph g = new DirectedGraph();
		g.add(); g.add(); g.add(); g.add(); g.add();
		g.add(5,4); g.add(5, 3); g.add(4, 1); g.add(3, 2);
		g.add(1, 5);
		PostOrderCollector p = new PostOrderCollector(g);
		ArrayList<Integer> a0 = new ArrayList<Integer>();
	    a0.add(5);
	    System.out.println();
	    System.out.println("PostOrder traversal: ");
	    p.traverse(a0);
	}
	*/
	
	@Test
    public void testDepthAndBreadthTraversals2() {
	    UndirectedGraph g = new UndirectedGraph();
	    g.add(); g.add(); g.add(); g.add(); g.add();
	    g.add(); g.add(); g.add(); g.add(); g.add();
	    g.add(1, 2); g.add(2, 5); g.add(2, 4); g.add(4, 5);
	    g.add(6, 7); g.add(1, 3); g.add(3, 6); g.add(4, 8);
	    g.add(8, 9); g.add(8, 10);
	    DepthFirstTraversal dft = new DepthFirstTraversal(g);
	    ArrayList<Integer> a0 = new ArrayList<Integer>();
	    a0.add(1);
	    System.out.println("Depth first traversal: ");
	    dft.traverse(a0);
	    System.out.println();
	    for (int i = 1; i < 11; i++) {
	    	assertEquals(dft.marked(i), true);
	    }
	    dft.clear();
	    for (int i = 1; i < 11; i++) {
	    	assertEquals(dft.marked(i), false);
	    }
	    BreadthFirstTraversal bft = new BreadthFirstTraversal(g);
	    ArrayList<Integer> a1 = new ArrayList<Integer>();
	    a1.add(1);
	    System.out.println("Breadth first traversal: ");
	    bft.traverse(a1);
	    System.out.println();
	}
	
	/*
	@Test testforAuto {
		DirectedGraph g = new DirectedGraph();
		g.add(); g.add(); g.add(); g.add(); g.add();
		g.add(5,4); g.add(5, 3); g.add(4, 1); g.add(3, 2);
		g.add(1, 5);
		DFSCollector dfs = new DFSCollector(g);
		assertEquals(dfs.getCollected(),)
	}
	*/
	private class DFSCollector extends DepthFirstTraversal {
		protected DFSCollector(Graph G) {
			super(G);
			//ArrayDeque<Integer> _adeque = new ArrayDeque<Integer>();
			_collected = new ArrayList<Integer>();
			_G2 = G;
		}

		@Override
		public boolean visit(int v) {
			_collected.add(v);
			return true;
		}

		

		private ArrayList<Integer> getCollected() {
			return _collected;
		}

		private ArrayList<Integer> _collected;
		private Graph _G2;
	}




	private class BFSCollector extends BreadthFirstTraversal {
		protected BFSCollector(Graph G) {
			super(G);
			_collected = new ArrayList<Integer>();
			_G2 = G;
		}

		@Override
		public boolean visit(int v) {
			_collected.add(v);
			return true;
		}

		private ArrayList<Integer> getCollected() {
			return _collected;
		}

		private ArrayList<Integer> _collected;
		private Graph _G2;
		private ArrayDeque<Integer> _adeque;
	}

	private class PostDFSCollector extends DepthFirstTraversal {
		protected PostDFSCollector(Graph G) {
			super(G);
			_collected = new ArrayList<Integer>();
			_G2 = G;
		}

		@Override
		public boolean visit(int v) {
			_collected.add(v);
			return true;
		}

		@Override
		protected boolean shouldPostVisit(int v) {
	        return true;
	    }

	    @Override
	    protected boolean reverseSuccessors(int v) {
	        return false;
	    }

		

		private ArrayList<Integer> getCollected() {
			return _collected;
		}

		private ArrayList<Integer> _collected;
		private Graph _G2;
	}

//============================================================
	/*
	private class PostOrderCollector extends Traversal {
		protected PostOrderCollector(Graph G) {
			super(G, Collections.asLifoQueue(new ArrayDeque<Integer>()));
			_collected = new ArrayList<Integer>();
			_G2 = G;
		}



		
		
		@Override
		protected boolean shouldPostVisit(int v) {
			if (_G2.outDegree(v) == 0) {
				return false;
			}
			else {
				for (int n : _G2.successors(v)) {
					if (!marked(n)) {
						return false;
					}
				}
			}
			return true;
		}

		@Override
	    protected boolean postVisit(int v) {
	        visit(v);
	        return true;
	    }


	    @Override
	    protected boolean reverseSuccessors(int v) {
	        return false;
	    }


	    @Override
	    protected boolean processSuccessor(int u, int v) {
	    	mark(v);
	    	if (!shouldPostVisit(v)) {
	    		visit(v);
	    	}
	    	if (reverseSuccessors(v)) {

	    	}
	        return !marked(v);
	    }
	    

		private ArrayList<Integer> getCollected() {
			return _collected;
		}
		

		private ArrayList<Integer> _collected;
		private Graph _G2;
		private ArrayDeque<Integer> _adeque;
	}
	*/
	
}
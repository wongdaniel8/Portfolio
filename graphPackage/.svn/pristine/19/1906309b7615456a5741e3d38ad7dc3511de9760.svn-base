package graph;

/* See restrictions in Graph.java. */

import java.util.List;
import java.util.ArrayList;
import java.util.ArrayDeque;
import java.util.HashMap;

/** The shortest paths through an edge-weighted labeled graph of type GRAPHTYPE.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to get parameters of the
 *  search and to return results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author Daniel Wong
 */
public abstract class ShortestPaths {

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        // FIXME
        _marked = new ArrayList<Integer>();
        _fringe = new ArrayDeque<Integer>();
        _map = new HashMap<Integer, Integer>();
        
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        // FIXME
        //breadthfirst is best i think
        //doesnt work with undirected graphs...
        //procedure: make it prefect for directed, then work on undirected
        //watch out for nulllpointer when successor or pred is 0

        _fringe.add(_dest);
        while (!_fringe.isEmpty()) {           
            int i = _fringe.removeFirst();
            if (!_marked.contains(i)) {
                _marked.add(i);
                int minSuccessor = findSmallestSuccessor(i); //maybe minSuccessor must not be marked?
                _map.put(i, minSuccessor);
                System.out.println("MS: "+minSuccessor+" I: "+i);
                //setPredecessor(minSuccessor, i);
                double label = calculateSmallestLabel(i, 0);
                if (minSuccessor != 0) {
                    setWeight(i, getWeight(minSuccessor) + getWeight(i, minSuccessor)); //update array?
                }
                if (_G.outDegree(i) == 0) {
                    _fringe.remove(i); //might be unnecessary watch out for null pointer
                    //map to minpredecessor here?
                }
                for (Integer k : _G.predecessors(i)) {
                    if (!_marked.contains(k)) {
                        _fringe.add(k);
                    }
                }
            }
        }

        initializePredecessorMap();

        System.out.println("vertex weights:");
        for (Integer i : _G.vertices()) {
            System.out.println("i: "+i+" weight: "+getWeight(i));
        }
        System.out.println("Successor map: ");
        for (int i : _map.keySet()) {
            System.out.println("i" + i + ", successor: "+_map.get(i));
        }

        System.out.println("Predecessor map: ");
        for (int i= 1; i < _G.vertexSize()+1; i++) {
            System.out.println("i" + i + ", predecessor: "+getPredecessor(i));
        }
       

    }
    /** Returns the smallest label, represented as COUNT, of VERTEX following
     * the shortes path towards the destination vertex. Recursively computes count. */
    private double calculateSmallestLabel(int vertex, double count) {
            
        if (vertex == _dest || _G.outDegree(vertex) == 0) {
            return count;
        } else {
            return calculateSmallestLabel(_map.get(vertex),
                _map.get(vertex) + count);   
        }
    }
    /** Returns the successor that will
     * lead VERTEX to the destination in the shortest path.
     * If no successor present, returns 0. */ 
    private int findSmallestSuccessor (int vertex) {
        if (_G.outDegree(vertex) == 0 || vertex == _dest) {
            return 0;
        }
        //System.out.println("successor: "+_G.successor(vertex, 0));
        HashMap<Integer, Double> miniMap = new HashMap<Integer, Double>();
        for (int successor : _G.successors(vertex)) {
            //for undirected tests: if successor is 0, do something else
           // System.out.println("v is "+ vertex + " and successor is "+successor);

            double value = getWeight(vertex, successor) + getWeight(successor);
            System.out.println("val: "+value);
        //should only look at marked successors!
            if (_marked.contains(successor)) {
                miniMap.put(successor, value); 
            }
        }
            System.out.println("minimap size: "+miniMap.size());
        double min = Integer.MAX_VALUE;
        int returnVal = -1;
        for (Integer k : miniMap.keySet()) {
            if (miniMap.get(k) < min) {
                min = miniMap.get(k);
                returnVal = k;
            }
        }
        return returnVal; 
    }

    /** Initializes my predecessor mapping. Assumes weights of vertices
     * have already been set. */
    private void initializePredecessorMap() {
        for (Integer vert : _G.vertices()) {
            if (vert != _source) {
                setPredecessor(vert, findSmallestPredecessor(vert));
            }
        }
        ArrayList<Integer> path = (ArrayList<Integer>) pathTo(_dest);
        for (int i = path.size() - 1; i > 0; i --) {
            setPredecessor(path.get(i), path.get(i - 1));
        } 
    }

    /** Returns the predecessor of VERTEX along the shortest path route. */
    private int findSmallestPredecessor(int vertex) {
        int min = -1; double weight = Integer.MAX_VALUE;
        for (Integer pred : _G.predecessors(vertex)) {
            double label = getWeight(pred, vertex) + getWeight(pred);
            if (label < weight) {
                min = pred; weight = label;
            }
        }
        return min;
    }

    /** Returns the starting vertex. */
    public int getSource() {
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME
        ArrayList<Integer> returnVal = new ArrayList<Integer>();
        returnVal.add(_source);
        int vertexToConsider = _map.get(_source);
        while (vertexToConsider != _map.get(v)) {
            returnVal.add(vertexToConsider);
            vertexToConsider = _map.get(vertexToConsider);
        }

        return returnVal;

    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    // FIXME

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    /** ArrayList to keep track of marked vertices. */
    private ArrayList<Integer> _marked;
    /** the fringe of vertices that need to be processed. */
    private ArrayDeque<Integer> _fringe;
    /** Maps a vertex (key) to another vertex (value) along the 
     * shortest path to the destination. If a vertex is not part of a
     * a shortest path route, then it does not have a corresponding key in the
     * map. */
    private HashMap<Integer, Integer> _map;
}

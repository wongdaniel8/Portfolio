package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author Daniel Wong
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        int r; int c;
        int size = getBoard().size();
        r = 1 + getGame().randInt(size);
        c = 1 + getGame().randInt(size);
        while (!getBoard().isLegal(getSide(), r, c)) {
            r = 1 + getGame().randInt(size);
            c = 1 + getGame().randInt(size);
        }
        getGame().makeMove(r, c);
        getGame().reportMove(getSide(), r, c);
    }

    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. */
    private int minmax(Side p, Board b, int d, int cutoff,
                       ArrayList<Integer> moves) {
        if (b.numOfSide(p) == b.size() * b.size()) {
            return b.size() * b.size();
        }
        if (b.numOfSide(p.opposite()) == b.size() * b.size()) {
            return Integer.MIN_VALUE;
        }
        if (d == 0) {
            staticEval(p, b);
        }
        int bestSoFar = Integer.MIN_VALUE;
        return 0;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P. */
    private int staticEval(Side p, Board b) {
        int bestSoFar = Integer.MIN_VALUE;
        MutableBoard copy = new MutableBoard(b);
        for (int r = 1; r < b.size() + 1; r++) {
            for (int c = 1; c < b.size() + 1; c++) {
                if (b.isLegal(p, r, c)) {
                    copy.addSpot(p, r, c);
                    int value = copy.numOfSide(p);
                    if (value > bestSoFar) {
                        bestSoFar = value;
                    }
                    copy.undo();
                }
            }
        }
        return bestSoFar;
    }

}

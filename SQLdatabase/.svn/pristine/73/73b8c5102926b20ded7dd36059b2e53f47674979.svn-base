// This is a SUGGESTED skeleton for a class that represents a single
// Table.  You can throw this away if you want, but it is a good
// idea to try to understand it first.  Our solution changes or adds
// about 100 lines in this skeleton.

// Comments that start with "//" are intended to be removed from your
// solutions.
package db61b;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.TreeMap; //my import

import static db61b.Utils.*;

/** A single table in a database.
 *  @author Daniel Wong 
 */
class Table implements Iterable<Row> {
    /** A new Table whose columns are given by COLUMNTITLES, which may
     *  not contain dupliace names. */
    Table(String[] columnTitles) {
        for (int i = columnTitles.length - 1; i >= 1; i -= 1) {
            for (int j = i - 1; j >= 0; j -= 1) {
                if (columnTitles[i].equals(columnTitles[j])) {
                    throw error("duplicate column name: %s",
                                columnTitles[i]);
                }
            }
        }
        // FILL IN
        for (int j = 0; j < columnTitles.length; j++) {
            _cols.add(columnTitles[j]);
        }
    }

    /** A new Table whose columns are give by COLUMNTITLES. */
    Table(List<String> columnTitles) {
        this(columnTitles.toArray(new String[columnTitles.size()]));
    }

    /** Return the number of columns in this table. */
    public int columns() {
        return _cols.size();
    }

    /** Return the title of the Kth column.  Requires 0 <= K < columns(). */
    public String getTitle(int k) {
        // REPLACE WITH SOLUTION
        return _cols.get(k);
    }

    /** Return the number of the column whose title is TITLE, or -1 if
     *  there isn't one. */
    public int findColumn(String title) {
        for (int i = 0; i < _cols.size(); i++) {
            if (_cols.get(i).equals(title)) {
                return i;
            }
        }
        return -1;
    }

    /** Return the number of Rows in this table. */
    public int size() {
        return _rows.size();
    }

    /** Returns an iterator that returns my rows in an unspecfied order. */
    @Override
    public Iterator<Row> iterator() {
        return _rows.iterator();
    }

    /** Add ROW to THIS if no equal row already exists.  Return true if anything
     *  was added, false otherwise. */
    public boolean add(Row row) {
        if (_rows.contains(row)) {
            return false;
        } else {
        _rows.add(row);
        return true;
        }
    }

    /** Read the contents of the file NAME.db, and return as a Table.
     *  Format errors in the .db file cause a DBException. */
    static Table readTable(String name) {
        BufferedReader input;
        Table table;
        input = null;
        table = null;
        try {
            input = new BufferedReader(new FileReader(name + ".db"));
            String header = input.readLine();
            if (header == null) {
                throw error("missing header in DB file");
            }
            String[] columnNames = header.split(",");

            // FILL IN
            //
            table = new Table(columnNames);
            while (input.ready()) {
                String row = input.readLine();
                String[] rowEntries = row.split(",");
                Row newRow = new Row(rowEntries);
                table.add(newRow);
            }
            //
            
        } catch (FileNotFoundException e) {
            throw error("could not find %s.db", name);
        } catch (IOException e) {
            throw error("problem reading from %s.db", name);
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    /* Ignore IOException */
                }
            }
        }
        return table;
    }

    /** Write the contents of TABLE into the file NAME.db. Any I/O errors
     *  cause a DBException. */
    void writeTable(String name) {
        PrintStream output;
        output = null;
        try {
            String sep;
            sep = "";
            output = new PrintStream(name + ".db");
            // FILL THIS IN 
            //
            //for (String col : this._columns) {
            for (int i = 0; i < _cols.size() - 1; i++) {
                output.append(_cols.get(i));
                output.append(",");
            }
            output.append(_cols.get(_cols.size() - 1));
            output.append("\n");
            for (Row r : _rows) {
                for (int i = 0; i < r.size() - 1; i++) {
                    output.append(r.get(i));
                    output.append(",");
                } 
                output.append(r.get(r.size() - 1));
                output.append("\n");
            }
            //
        } catch (IOException e) {
            throw error("trouble writing to %s.db", name);
        } finally {
            if (output != null) {
                output.close();
            }
        }
    }

    /** Print my contents on the standard output, using TITLE as the title. */
    void print() {
        // FILL IN
        
        if (_cols.size() > 1) {
        //System.out.print(_cols.get(0)+", ");
          //  for (int i = 1; i < _cols.size() - 1; i++) {
            //    System.out.print(_cols.get(i)+", ");
            //}
            //System.out.println(_cols.get(_cols.size() - 1));
            for (Row r : _rows) {
                System.out.print("  " + r.get(0)+ " "); 
                for (int j = 1; j < r.size() - 1; j++) {
                    System.out.print(r.get(j)  + " ");
                }
                System.out.println(r.get(r.size() - 1));
            }

        } else {
           // System.out.println(_cols.get(0));
            for (Row r : _rows) {
                System.out.println("  " + r.get(0)); 
            }
        }
        
    }

    /** Return a new Table whose columns are COLUMNNAMES, selected from
     *  rows of this table that satisfy CONDITIONS. */
    Table select(List<String> columnNames, List<Condition> conditions) {
        Table result = new Table(columnNames);
        // FILL IN
   
            for (Row r : _rows) {
                int i = 0;
                String[] newElements = new String[columnNames.size()];
                for (String col : columnNames) {
                    newElements[i] = r.get(findColumn(col));
                    i++;

                }
                Row newRow = new Row(newElements);
                if (conditions == null || 
                    Condition.test(conditions, r)) { //or _rows after converting to array? 
                    result.add(newRow);
                } 
            }
        
        //
        //result.print();
        return result;

    }

    /** Return a new Table whose columns are COLUMNNAMES, selected
     *  from pairs of rows from this table and from TABLE2 that match
     *  on all columns with identical names and satisfy CONDITIONS. */
    Table select(Table table2, List<String> columnNames,
                 List<Condition> conditions) {
        Table result = new Table(columnNames);
        // FILL IN
        //

        //
        return result;
    }

    /** Return true if the columns COMMON1 from ROW1 and COMMON2 from
     *  ROW2 all have identical values.  Assumes that COMMON1 and
     *  COMMON2 have the same number of elements and the same names,
     *  that the columns in COMMON1 apply to this table, those in
     *  COMMON2 to another, and that ROW1 and ROW2 come, respectively,
     *  from those tables. */
    private static boolean equijoin(List<Column> common1, List<Column> common2,
                                    Row row1, Row row2) {
        return true; // REPLACE WITH SOLUTION
    }

    /** My rows. */
    private HashSet<Row> _rows = new HashSet<>();
    // FILL IN
    private ArrayList<String> _cols = new ArrayList<String>();
}

